linux-wpan
==========
Mailinglist

<linux-wpan@vger.kernel.org>
http://www.spinics.net/lists/linux-wpan[Mailinglist-Archive]

.IRC
#linux-wpan on irc.freenode.net

wpan-tools
----------

To access the nl802154 netlink inteface you will need the wpan-tools.

Dependencies:

- netlink library http://www.infradead.org/~tgr/libnl/[libnl].

These tools contains:

[horizontal]
*iwpan*:: based on the wireless http://wireless.kernel.org/en/users/Documentation/iw[iw] tool.

Download
~~~~~~~~
For the last release check out http://wpan.cakelab.org/releases/[releases] page:

http://wpan.cakelab.org/releases/

Supported Hardware
------------------

.Supported 802.15.4 Hardware
[cols="3,4,2,^2,12",options="header"]
|=============================================================
|Transceiver |Supported        |Driver     | Bus |Where to buy
|at86rf230   |no               |at86rf230? | SPI |
|at86rf231   |yes              |at86rf230  | SPI | http://downloads.qi-hardware.com/people/werner/wpan/web/[atben] Out of stock. Mailto linux-wpan and Werner to produce maybe new ones. Or contact http://en.qi-hardware.com/wiki/Main_Page[qi-hardware].
|at86rf233   |yes              |at86rf230  | SPI | http://openlabs.co/store/Raspberry-Pi-802.15.4-radio[openlabs], http://www.digikey.com/product-search/en?x=0&y=0&lang=en&site=us&keywords=ATREB233-XPRO[digikey]
|at86rf212   |yes              |at86rf230  | SPI |
|at86rf212b  |yes              |at86rf230  | SPI | http://www.digikey.com/product-search/en?x=0&y=0&lang=en&site=us&keywords=ATZB-212B-XPRO[digikey]
|cc2520      |yes              |cc2520     | SPI |
|cc2420      |no               |           | SPI | http://de.aliexpress.com/store/product/ZIGBEE-networking-technology-Wi-Fi-CC2420-wireless-transceiver-modules-including-antenna/1383438_2036388706.html[aliexpress]
|atusb       |not mainline yet |atusb      | USB | http://downloads.qi-hardware.com/people/werner/wpan/web/[atusb] Out of stock. Mailto linux-wpan and Werner to produce maybe new ones. Or contact http://en.qi-hardware.com/wiki/Main_Page[qi-hardware].
|RZUSBstick  |no, WIP          |atusb      | USB |
|=============================================================

How-To's
--------

This section describes various How-To's.
Per default you should have already a node type wpan interface.

////////
af802154
~~~~~~~

////////
6LoWPAN
~~~~~~~

Set some valid pan_id, 802.15.4 default is 0xffff which means not assigned:

---------------------------------------------------------------------
iwpan dev wpan0 set pan_id 0xbeef
---------------------------------------------------------------------

Currently you need to setup the 6LoWPAN interface manually:

---------------------------------------------------------------------
ip link add link wpan0 name lowpan0 type lowpan
---------------------------------------------------------------------

That's it! Now you have some lowpan0 interface with a 6LoWPAN 1280 MTU which runs on top the wpan interface.
As default you have a default link-local address based on the MAC (extended address).

Note: we don't support any case of short-addresses right now. This is a complicated issue with the IPv6 neighbour discovery cache.
Of course we supporting broadcast frames via short-addresses but nothing more in 802.15.4 6LoWPAN.
Only extended address handling is supported right now.

Sniffing
~~~~~~~~

To sniff first remove all wpan interface which sits on top of the wpan phy.
You will get a list of all current running phy interface with:

---------------------------------------------------------------------
iwpan dev
---------------------------------------------------------------------

then delete all interfaces with:

---------------------------------------------------------------------
iwpan dev $IFNAME del
---------------------------------------------------------------------

Finally create a monitor interface:

---------------------------------------------------------------------
iwpan phy phy0 interface add monitor%d type monitor
---------------------------------------------------------------------

Then bring this interface up and run wireshark, tcpdump, etc... on it.
Running a wireshark as sniffing frontend on the $HOST and connect to a $TARGET like Raspberry Pi which have some ethernet ssh connection, you can try:

---------------------------------------------------------------------
ssh root@$TARGET 'tshark -i monitor0 -w -' | wireshark -k -i -
---------------------------------------------------------------------

This will pipe all sniffing frames from $TARGET side to $HOST running wireshark application.
Note you need maybe to change the "$TARGET" and "montior0" to your settings.

//////
Foren6
^^^^^^

//////
Developing
----------

Current developing repository is http://git.kernel.org/cgit/linux/kernel/git/bluetooth/bluetooth-next.git[bluetooth-next].
All patches should be send to <linux-wpan@vger.kernel.org> and based on bluetooth-next.

For wpan-tools checkout the https://github.com/linux-wpan/wpan-tools[wpan-tools] repository. Also send patches to <linux-wpan@vger.kernel.org> for it with a "wpan-tools" tag.
The same for https://github.com/linux-wpan/wpan-misc[wpan-misc].

Open Tasks
~~~~~~~~~~

* There is a lot of missing features for enum definition to some string definition in iwpan which can be lookup in 802.15.4 standard. Words say more than numbers...
** channel/page to frequency
** cca modes/opts
** no aret mode for max_frame_retires -1
** etc
* Missing features which wireless has and wpan not. Since we based our implementation on wireless we should sync "good patches" from wireless branch.
** trace functionality for driver_ops http://git.kernel.org/cgit/linux/kernel/git/bluetooth/bluetooth-next.git/tree/net/mac80211/driver-ops.h[driver-ops.h]
** Whatever you want and find
* rework
** missing features in nl802154, crypto etc.
** new frame parsing style in mac802154 and ieee802154 based on mac80211 frame parsing design. Draft is https://github.com/linux-wpan/linux-wpan-next/blob/wpan_rework_rfc/net/mac802154/rx.c[mac802154 rx] and
https://github.com/linux-wpan/linux-wpan-next/blob/wpan_rework_rfc/net/ieee802154/6lowpan/rx.c[6LoWPAN]. Crypto need to be done at first, otherwise I can't test it.
** remove cb context from dev_hard_header and introduce generic header generation functions like https://github.com/linux-wpan/linux-wpan-next/blob/wpan_rework_rfc/net/ieee802154/header_ops.c#L80[header_ops]. Here too, crypto need to be done at first.
* systemd
** add basic functionality for nl802154 and 6lowpan setup in systemd-networkd
* network-manager
* devicetree extended addr setting, draft is here http://www.spinics.net/lists/linux-wpan/msg01503.html[ieee802154: add usual way to get extended address via device tree]
* RPL? - not our job, need to go through ipv6 netdev community, but we should do something to have a "started" mainline solution.
* cleanup/fix 802.15.4 af raw/dgram socket code. We should use bluetooth socket code as example.

Rework
~~~~~~

Currently a rework of 802.15.4 subsystem is in progress.

The rework will contains a new netlink API and a general handling about frame creation and parsing.

.Work status
[options="header"]
|=======================================
|Milestone        | Description | state
|1. nl802154      | new netlink framework              | [green]#mostly done#
|2. crypto-layer  | accessable over nl802154 and tools | [red]#TODO#
|3. frame parsing | remove bugs, more generical        | [red]#TODO#
|=======================================

*NOTE* we need to finish rework state 2. before we can start 3 or anything else which touch the frame parsing/generation.

For the nl802154 framework you will need the wpan-tools, older kernels need lowpan-tools but this is not recommended.

// vim: set syntax=asciidoc:
